import numpy as np
import matplotlib.pyplot as plt
# knn
print('----------------------------------------------------------------')
print('KNeighborsRegressor')
params = [{'n_neighbors': 1}, {'n_neighbors': 2}, {'n_neighbors': 3}, {'n_neighbors': 4}, {'n_neighbors': 5}, {'n_neighbors': 6}, {'n_neighbors': 7}, {'n_neighbors': 8}, {'n_neighbors': 9}, {'n_neighbors': 10}, {'n_neighbors': 11}, {'n_neighbors': 12}, {'n_neighbors': 13}, {'n_neighbors': 14}, {'n_neighbors': 15}, {'n_neighbors': 16}, {'n_neighbors': 17}, {'n_neighbors': 18}, {'n_neighbors': 19}, {'n_neighbors': 20}, {'n_neighbors': 21}, {'n_neighbors': 22}, {'n_neighbors': 23}, {'n_neighbors': 24}, {'n_neighbors': 25}, {'n_neighbors': 26}, {'n_neighbors': 27}, {'n_neighbors': 28}, {'n_neighbors': 29}, {'n_neighbors': 30}, {'n_neighbors': 31}, {'n_neighbors': 32}, {'n_neighbors': 33}, {'n_neighbors': 34}, {'n_neighbors': 35}, {'n_neighbors': 36}, {'n_neighbors': 37}, {'n_neighbors': 38}, {'n_neighbors': 39}, {'n_neighbors': 40}, {'n_neighbors': 41}, {'n_neighbors': 42}, {'n_neighbors': 43}, {'n_neighbors': 44}, {'n_neighbors': 45}, {'n_neighbors': 46}, {'n_neighbors': 47}, {'n_neighbors': 48}, {'n_neighbors': 49}]
mean_test_score = [0.00496747, 0.18264116, 0.23995829, 0.29897687, 0.29658439,
       0.30995802, 0.30489882, 0.31953518, 0.32667914, 0.32382178,
       0.3236356 , 0.34384232, 0.34769477, 0.34684723, 0.34501673,
       0.34605433, 0.34180724, 0.34258255, 0.33972714, 0.34465801,
       0.34364788, 0.34301575, 0.34231094, 0.34306541, 0.3426781 ,
       0.3442783 , 0.34445433, 0.34381132, 0.34205   , 0.34085682,
       0.33811186, 0.33649026, 0.33696983, 0.33625423, 0.33446466,
       0.33248871, 0.33158528, 0.33042048, 0.32967808, 0.32909805,
       0.32892564, 0.3280083 , 0.32734238, 0.3266772 , 0.32533469,
       0.32452081, 0.32265725, 0.32133659, 0.32078623]
# Best {'n_neighbors': 13}
X = [neigh['n_neighbors'] for neigh in params]
y = mean_test_score
plt.plot(X, y)
plt.xlabel('n_neighbors')
plt.ylabel('Accuracy')
plt.title('Cross validation result of KNeighborsRegressor')
plt.savefig('./plots/KNeighborsRegressor.png')
plt.clf()
print('Best params', params[np.argmax(mean_test_score)])
# RandomForest
print('----------------------------------------------------------------')
print('RandomForestRegressor')
params = [{'max_features': 'auto', 'n_estimators': 10, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 20, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 30, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 40, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 50, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 60, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 70, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 80, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 90, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 100, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 110, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 120, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 130, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 140, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 150, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 160, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 170, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 180, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 190, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 200, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 210, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 220, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 230, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 240, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 250, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 260, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 270, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 280, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 290, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 300, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 310, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 320, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 330, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 340, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 350, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 360, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 370, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 380, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 390, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 400, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 410, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 420, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 430, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 440, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 450, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 460, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 470, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 480, 'random_state': 4}, {'max_features': 'auto', 'n_estimators': 490, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 10, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 20, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 30, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 40, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 50, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 60, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 70, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 80, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 90, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 100, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 110, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 120, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 130, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 140, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 150, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 160, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 170, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 180, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 190, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 200, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 210, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 220, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 230, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 240, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 250, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 260, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 270, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 280, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 290, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 300, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 310, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 320, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 330, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 340, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 350, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 360, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 370, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 380, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 390, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 400, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 410, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 420, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 430, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 440, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 450, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 460, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 470, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 480, 'random_state': 4}, {'max_features': 'sqrt', 'n_estimators': 490, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 10, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 20, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 30, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 40, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 50, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 60, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 70, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 80, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 90, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 100, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 110, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 120, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 130, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 140, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 150, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 160, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 170, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 180, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 190, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 200, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 210, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 220, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 230, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 240, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 250, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 260, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 270, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 280, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 290, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 300, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 310, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 320, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 330, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 340, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 350, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 360, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 370, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 380, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 390, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 400, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 410, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 420, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 430, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 440, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 450, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 460, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 470, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 480, 'random_state': 4}, {'max_features': 'log2', 'n_estimators': 490, 'random_state': 4}]
mean_test_score = [0.19895404, 0.33566787, 0.36023004, 0.41147493, 0.4319036 ,
       0.43331906, 0.43168972, 0.42911109, 0.43010669, 0.43463765,
       0.43559225, 0.43470056, 0.43806185, 0.43955439, 0.44253894,
       0.44250745, 0.44232641, 0.4361984 , 0.43828335, 0.43652724,
       0.43779273, 0.43876262, 0.43808174, 0.44155967, 0.44395866,
       0.4453293 , 0.44398972, 0.44299056, 0.44313415, 0.44297738,
       0.44385804, 0.44598897, 0.44674848, 0.4463826 , 0.4459805 ,
       0.44771433, 0.44767411, 0.44911326, 0.44948065, 0.44875754,
       0.44985905, 0.44907151, 0.4482413 , 0.44700962, 0.44673362,
       0.4483295 , 0.44862555, 0.44856563, 0.44779273, 0.41627734,
       0.46912015, 0.47980091, 0.4789501 , 0.47811466, 0.47759678,
       0.47484475, 0.46989155, 0.47120797, 0.47740895, 0.4754559 ,
       0.47806978, 0.47743718, 0.47491878, 0.47606505, 0.47405854,
       0.47601922, 0.47715022, 0.47814937, 0.47886405, 0.48025792,
       0.47885635, 0.47968791, 0.48088953, 0.48041614, 0.48243093,
       0.48320125, 0.4842492 , 0.48707098, 0.48710789, 0.48692058,
       0.48622023, 0.48708011, 0.48649241, 0.48607904, 0.485858  ,
       0.48708977, 0.48750361, 0.4875581 , 0.48751549, 0.48809412,
       0.48736703, 0.48709617, 0.4869228 , 0.48637885, 0.48643245,
       0.48755414, 0.48833368, 0.48787364, 0.41627734, 0.46912015,
       0.47980091, 0.4789501 , 0.47811466, 0.47759678, 0.47484475,
       0.46989155, 0.47120797, 0.47740895, 0.4754559 , 0.47806978,
       0.47743718, 0.47491878, 0.47606505, 0.47405854, 0.47601922,
       0.47715022, 0.47814937, 0.47886405, 0.48025792, 0.47885635,
       0.47968791, 0.48088953, 0.48041614, 0.48243093, 0.48320125,
       0.4842492 , 0.48707098, 0.48710789, 0.48692058, 0.48622023,
       0.48708011, 0.48649241, 0.48607904, 0.485858  , 0.48708977,
       0.48750361, 0.4875581 , 0.48751549, 0.48809412, 0.48736703,
       0.48709617, 0.4869228 , 0.48637885, 0.48643245, 0.48755414,
       0.48833368, 0.48787364]

X = [p['n_estimators'] for p in params if p['max_features'] == 'sqrt']
y = [score for p, score in zip(params, mean_test_score) if p['max_features'] == 'sqrt']
# Best {'max_features': 'sqrt', 'n_estimators': 480, 'random_state': 4}
plt.plot(X, y)
plt.xlabel('n_estimators')
plt.ylabel('Accuracy')
plt.title('Cross validation result of RandomForestRegressor')
plt.savefig('./plots/RandomForestRegressor.png')
plt.clf()
print('Best params', params[np.argmax(mean_test_score)])

# Gradident Boosting
print('----------------------------------------------------------------')
print('GradientBoostingRegressor')
params = [{'max_features': 'auto', 'n_estimators': 10, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 20, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 30, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 40, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 50, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 60, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 70, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 80, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 90, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 100, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 110, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 120, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 130, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 140, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 150, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 160, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 170, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 180, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 190, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 200, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 210, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 220, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 230, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 240, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 250, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 260, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 270, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 280, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 290, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 300, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 310, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 320, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 330, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 340, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 350, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 360, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 370, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 380, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 390, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 400, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 410, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 420, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 430, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 440, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 450, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 460, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 470, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 480, 'random_state': 1}, {'max_features': 'auto', 'n_estimators': 490, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 10, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 20, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 30, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 40, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 50, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 60, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 70, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 80, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 90, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 100, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 110, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 120, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 130, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 140, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 150, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 160, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 170, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 180, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 190, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 200, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 210, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 220, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 230, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 240, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 250, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 260, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 270, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 280, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 290, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 300, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 310, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 320, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 330, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 340, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 350, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 360, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 370, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 380, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 390, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 400, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 410, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 420, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 430, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 440, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 450, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 460, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 470, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 480, 'random_state': 1}, {'max_features': 'sqrt', 'n_estimators': 490, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 10, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 20, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 30, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 40, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 50, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 60, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 70, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 80, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 90, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 100, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 110, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 120, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 130, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 140, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 150, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 160, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 170, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 180, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 190, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 200, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 210, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 220, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 230, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 240, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 250, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 260, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 270, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 280, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 290, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 300, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 310, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 320, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 330, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 340, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 350, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 360, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 370, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 380, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 390, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 400, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 410, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 420, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 430, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 440, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 450, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 460, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 470, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 480, 'random_state': 1}, {'max_features': 'log2', 'n_estimators': 490, 'random_state': 1}]
mean_test_score = [0.36603561, 0.40342494, 0.41986874, 0.43063967, 0.43995818,
       0.44229297, 0.44211648, 0.44256369, 0.44295731, 0.44351592,
       0.44163243, 0.44173004, 0.44084236, 0.4385532 , 0.43745453,
       0.43734014, 0.43672824, 0.43671845, 0.43652712, 0.43685117,
       0.43520115, 0.43592024, 0.43506887, 0.43581148, 0.43529659,
       0.43533572, 0.43468453, 0.43469205, 0.43484466, 0.43379435,
       0.43281996, 0.43326991, 0.43250564, 0.43217317, 0.43218801,
       0.43261772, 0.43322074, 0.43379972, 0.43371429, 0.43397903,
       0.43472772, 0.43429874, 0.43370071, 0.43338566, 0.43398335,
       0.43430415, 0.43432411, 0.43460537, 0.43485628, 0.2504079 ,
       0.36394652, 0.39721741, 0.41662447, 0.42764503, 0.42793109,
       0.43444078, 0.4379081 , 0.4403912 , 0.44351975, 0.44565876,
       0.45059589, 0.44934971, 0.45019571, 0.45354594, 0.45475459,
       0.45487395, 0.45657854, 0.45678758, 0.45677571, 0.45853173,
       0.45998873, 0.46168252, 0.46079469, 0.46311434, 0.46505416,
       0.46785076, 0.46874973, 0.46886274, 0.4684284 , 0.46842535,
       0.46769545, 0.46774402, 0.46795931, 0.46786731, 0.46820294,
       0.46942048, 0.47019117, 0.4704196 , 0.47068858, 0.47047043,
       0.47054821, 0.47097356, 0.47075823, 0.47104712, 0.47061629,
       0.4715672 , 0.47249717, 0.47401158, 0.2504079 , 0.36394652,
       0.39721741, 0.41662447, 0.42764503, 0.42793109, 0.43444078,
       0.4379081 , 0.4403912 , 0.44351975, 0.44565876, 0.45059589,
       0.44934971, 0.45019571, 0.45354594, 0.45475459, 0.45487395,
       0.45657854, 0.45678758, 0.45677571, 0.45853173, 0.45998873,
       0.46168252, 0.46079469, 0.46311434, 0.46505416, 0.46785076,
       0.46874973, 0.46886274, 0.4684284 , 0.46842535, 0.46769545,
       0.46774402, 0.46795931, 0.46786731, 0.46820294, 0.46942048,
       0.47019117, 0.4704196 , 0.47068858, 0.47047043, 0.47054821,
       0.47097356, 0.47075823, 0.47104712, 0.47061629, 0.4715672 ,
       0.47249717, 0.47401158]
# Best params {'max_features': 'auto', 'n_estimators': 100, 'random_state': 1}
X = [p['n_estimators'] for p in params if p['max_features'] == 'auto']
y = [score for p, score in zip(params, mean_test_score) if p['max_features'] == 'auto']
plt.plot(X, y)
plt.xlabel('n_estimators')
plt.ylabel('Accuracy')
plt.title('Cross validation result of GradientBoostingRegressor')
plt.savefig('./plots/GradientBoostingRegressor.png')
plt.clf()
# print('Best params', params[np.argmax(mean_test_score)])
print(X[np.argmax(y)])